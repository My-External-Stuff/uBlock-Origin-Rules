# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.

stages:
  - test
  - deploy

cache:
  paths:
    #- .cache/pip
    - "$CI_PROJECT_DIR/.cache/pip"
    - venv/

before_script:
  - python -V  # Print out python version for debugging
  - pip install virtualenv
  - pip install git+https://github.com/adblockplus/python-abp
  - virtualenv venv
  - source venv/bin/activate
  - git config --global user.email "$GITLAB_USER_EMAIL"
  - git config --global user.name "AnonymousPoster"

test:
  script:
    - git checkout $CI_COMMIT_REF_NAME
    - flrender -i ublockorigin-rules=. AnonymousPoster.template blockrules.txt
  except:
    - master

deploy:
  script:
    - git checkout $CI_COMMIT_REF_NAME
    - flrender -i ublockorigin-rules=. AnonymousPoster.template blockrules.txt
    #- git remote set-url origin https://AnonymousPoster:$DEPLOY_KEY@gitlab.com/$CI_PROJECT_PATH.git
    - git remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/$CI_PROJECT_PATH.git
    - git add .
    - git commit -m '[skip ci] commit from CI runner'
    - git push -u origin $CI_COMMIT_REF_NAME
  only:
    - master

